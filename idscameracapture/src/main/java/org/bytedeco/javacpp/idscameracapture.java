// Targeted by JavaCPP version 1.3: DO NOT EDIT THIS FILE

package org.bytedeco.javacpp;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.opencv_core.*;
import static org.bytedeco.javacpp.opencv_imgproc.*;

public class idscameracapture extends org.bytedeco.javacpp.presets.IdsCameraCapt {
    static { Loader.load(); }

// Parsed from idsCameraCapture.h

// #ifndef SHARED_H__
// #define SHARED_H__

// #include <opencv/cv.h>
// #include <uEye.h>

@NoOffset public static class IdsCameraCapt extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IdsCameraCapt(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public IdsCameraCapt(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public IdsCameraCapt position(long position) {
        return (IdsCameraCapt)super.position(position);
    }

	public IdsCameraCapt() { super((Pointer)null); allocate(); }
	private native void allocate();

	// Closes camera

	// Init - Open specified camera
	// IN:
	// camId  - Cam.ID displayd in IDS Camera Manager
	// iniFilePath - path to ini file used set camera parameters
	// RETURN:
	// > 0 - success, indicates image buffer size
	public native int Init(int camID, @Cast("char*") BytePointer iniFilePath);
	public native int Init(int camID, @Cast("char*") ByteBuffer iniFilePath);
	public native int Init(int camID, @Cast("char*") byte[] iniFilePath);

	// GetFrame - Get most recent frame from camera
	public native Mat GetFrameImageMat();
	public native IplImage GetFrameImage();
	public native void SaveToDisk(@Const @ByRef Mat frm, @StdString BytePointer fileName);
	public native void SaveToDisk(@Const @ByRef Mat frm, @StdString String fileName);

}

// #endif


}
